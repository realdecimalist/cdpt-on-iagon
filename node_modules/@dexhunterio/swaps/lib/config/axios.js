import { d as s } from "../index-ca8eb9e1.js";
import { a as o } from "../axios-ddd885c5.js";
import { decrypt as d } from "./decrypt.js";
const h = "https://api.dexhunter.app", n = o.create({
  baseURL: "https://api.dexhunter.app"
}), u = "61553794402181761075972151624324", c = s.Buffer.from(u, "utf8"), a = (t) => {
  const e = {
    ...t.config,
    headers: {
      ...t.config.headers,
      "Is-Dev": !1
      // Set to false in production on retry, true otherwise
    },
    retriedDueToDecryptError: !0
  };
  return n.request(e);
};
async function i(t, e) {
  return d(t, e);
}
n.interceptors.response.use(async (t) => {
  if (t.config.retriedDueToDecryptError)
    return t;
  try {
    const e = await i(c, t.data);
    if (typeof e == "string")
      try {
        t.data = JSON.parse(e);
      } catch {
        t.data = e;
      }
    else
      t.data = e;
    return t;
  } catch {
    return a(t).catch((r) => Promise.reject(r));
  }
}, async (t) => {
  if (t.response) {
    if (t.config.retriedDueToDecryptError)
      return Promise.reject(t);
    try {
      return t.response.data = await i(c, t.response.data), Promise.reject(t);
    } catch {
      return a(t).catch((r) => Promise.reject(r));
    }
  }
  return Promise.reject(t);
});
export {
  h as DEFAULT_API_URL,
  n as server
};
