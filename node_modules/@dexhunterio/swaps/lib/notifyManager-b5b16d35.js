class C {
  constructor() {
    this.listeners = /* @__PURE__ */ new Set(), this.subscribe = this.subscribe.bind(this);
  }
  subscribe(t) {
    const n = {
      listener: t
    };
    return this.listeners.add(n), this.onSubscribe(), () => {
      this.listeners.delete(n), this.onUnsubscribe();
    };
  }
  hasListeners() {
    return this.listeners.size > 0;
  }
  onSubscribe() {
  }
  onUnsubscribe() {
  }
}
const A = typeof window > "u" || "Deno" in window;
function V() {
}
function $(e, t) {
  return typeof e == "function" ? e(t) : e;
}
function J(e) {
  return typeof e == "number" && e >= 0 && e !== 1 / 0;
}
function G(e, t) {
  return Math.max(e + (t || 0) - Date.now(), 0);
}
function W(e, t, n) {
  return b(e) ? typeof t == "function" ? {
    ...n,
    queryKey: e,
    queryFn: t
  } : {
    ...t,
    queryKey: e
  } : e;
}
function X(e, t, n) {
  return b(e) ? [{
    ...t,
    queryKey: e
  }, n] : [e || {}, t];
}
function Y(e, t) {
  const {
    type: n = "all",
    exact: s,
    fetchStatus: r,
    predicate: u,
    queryKey: l,
    stale: a
  } = e;
  if (b(l)) {
    if (s) {
      if (t.queryHash !== U(l, t.options))
        return !1;
    } else if (!M(t.queryKey, l))
      return !1;
  }
  if (n !== "all") {
    const f = t.isActive();
    if (n === "active" && !f || n === "inactive" && f)
      return !1;
  }
  return !(typeof a == "boolean" && t.isStale() !== a || typeof r < "u" && r !== t.state.fetchStatus || u && !u(t));
}
function Z(e, t) {
  const {
    exact: n,
    fetching: s,
    predicate: r,
    mutationKey: u
  } = e;
  if (b(u)) {
    if (!t.options.mutationKey)
      return !1;
    if (n) {
      if (E(t.options.mutationKey) !== E(u))
        return !1;
    } else if (!M(t.options.mutationKey, u))
      return !1;
  }
  return !(typeof s == "boolean" && t.state.status === "loading" !== s || r && !r(t));
}
function U(e, t) {
  return ((t == null ? void 0 : t.queryKeyHashFn) || E)(e);
}
function E(e) {
  return JSON.stringify(e, (t, n) => O(n) ? Object.keys(n).sort().reduce((s, r) => (s[r] = n[r], s), {}) : n);
}
function M(e, t) {
  return g(e, t);
}
function g(e, t) {
  return e === t ? !0 : typeof e != typeof t ? !1 : e && t && typeof e == "object" && typeof t == "object" ? !Object.keys(t).some((n) => !g(e[n], t[n])) : !1;
}
function q(e, t) {
  if (e === t)
    return e;
  const n = j(e) && j(t);
  if (n || O(e) && O(t)) {
    const s = n ? e.length : Object.keys(e).length, r = n ? t : Object.keys(t), u = r.length, l = n ? [] : {};
    let a = 0;
    for (let f = 0; f < u; f++) {
      const y = n ? f : r[f];
      l[y] = q(e[y], t[y]), l[y] === e[y] && a++;
    }
    return s === u && a === s ? e : l;
  }
  return t;
}
function ee(e, t) {
  if (e && !t || t && !e)
    return !1;
  for (const n in e)
    if (e[n] !== t[n])
      return !1;
  return !0;
}
function j(e) {
  return Array.isArray(e) && e.length === Object.keys(e).length;
}
function O(e) {
  if (!L(e))
    return !1;
  const t = e.constructor;
  if (typeof t > "u")
    return !0;
  const n = t.prototype;
  return !(!L(n) || !n.hasOwnProperty("isPrototypeOf"));
}
function L(e) {
  return Object.prototype.toString.call(e) === "[object Object]";
}
function b(e) {
  return Array.isArray(e);
}
function R(e) {
  return new Promise((t) => {
    setTimeout(t, e);
  });
}
function K(e) {
  R(0).then(e);
}
function te() {
  if (typeof AbortController == "function")
    return new AbortController();
}
function ne(e, t, n) {
  return n.isDataEqual != null && n.isDataEqual(e, t) ? e : typeof n.structuralSharing == "function" ? n.structuralSharing(e, t) : n.structuralSharing !== !1 ? q(e, t) : t;
}
class z extends C {
  constructor() {
    super(), this.setup = (t) => {
      if (!A && window.addEventListener) {
        const n = () => t();
        return window.addEventListener("visibilitychange", n, !1), window.addEventListener("focus", n, !1), () => {
          window.removeEventListener("visibilitychange", n), window.removeEventListener("focus", n);
        };
      }
    };
  }
  onSubscribe() {
    this.cleanup || this.setEventListener(this.setup);
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var t;
      (t = this.cleanup) == null || t.call(this), this.cleanup = void 0;
    }
  }
  setEventListener(t) {
    var n;
    this.setup = t, (n = this.cleanup) == null || n.call(this), this.cleanup = t((s) => {
      typeof s == "boolean" ? this.setFocused(s) : this.onFocus();
    });
  }
  setFocused(t) {
    this.focused !== t && (this.focused = t, this.onFocus());
  }
  onFocus() {
    this.listeners.forEach(({
      listener: t
    }) => {
      t();
    });
  }
  isFocused() {
    return typeof this.focused == "boolean" ? this.focused : typeof document > "u" ? !0 : [void 0, "visible", "prerender"].includes(document.visibilityState);
  }
}
const B = new z(), P = ["online", "offline"];
class I extends C {
  constructor() {
    super(), this.setup = (t) => {
      if (!A && window.addEventListener) {
        const n = () => t();
        return P.forEach((s) => {
          window.addEventListener(s, n, !1);
        }), () => {
          P.forEach((s) => {
            window.removeEventListener(s, n);
          });
        };
      }
    };
  }
  onSubscribe() {
    this.cleanup || this.setEventListener(this.setup);
  }
  onUnsubscribe() {
    if (!this.hasListeners()) {
      var t;
      (t = this.cleanup) == null || t.call(this), this.cleanup = void 0;
    }
  }
  setEventListener(t) {
    var n;
    this.setup = t, (n = this.cleanup) == null || n.call(this), this.cleanup = t((s) => {
      typeof s == "boolean" ? this.setOnline(s) : this.onOnline();
    });
  }
  setOnline(t) {
    this.online !== t && (this.online = t, this.onOnline());
  }
  onOnline() {
    this.listeners.forEach(({
      listener: t
    }) => {
      t();
    });
  }
  isOnline() {
    return typeof this.online == "boolean" ? this.online : typeof navigator > "u" || typeof navigator.onLine > "u" ? !0 : navigator.onLine;
  }
}
const D = new I();
function _(e) {
  return Math.min(1e3 * 2 ** e, 3e4);
}
function H(e) {
  return (e ?? "online") === "online" ? D.isOnline() : !0;
}
class k {
  constructor(t) {
    this.revert = t == null ? void 0 : t.revert, this.silent = t == null ? void 0 : t.silent;
  }
}
function se(e) {
  return e instanceof k;
}
function re(e) {
  let t = !1, n = 0, s = !1, r, u, l;
  const a = new Promise((o, c) => {
    u = o, l = c;
  }), f = (o) => {
    s || (v(new k(o)), e.abort == null || e.abort());
  }, y = () => {
    t = !0;
  }, i = () => {
    t = !1;
  }, h = () => !B.isFocused() || e.networkMode !== "always" && !D.isOnline(), N = (o) => {
    s || (s = !0, e.onSuccess == null || e.onSuccess(o), r == null || r(), u(o));
  }, v = (o) => {
    s || (s = !0, e.onError == null || e.onError(o), r == null || r(), l(o));
  }, F = () => new Promise((o) => {
    r = (c) => {
      const d = s || !h();
      return d && o(c), d;
    }, e.onPause == null || e.onPause();
  }).then(() => {
    r = void 0, s || e.onContinue == null || e.onContinue();
  }), w = () => {
    if (s)
      return;
    let o;
    try {
      o = e.fn();
    } catch (c) {
      o = Promise.reject(c);
    }
    Promise.resolve(o).then(N).catch((c) => {
      var d, S;
      if (s)
        return;
      const p = (d = e.retry) != null ? d : 3, m = (S = e.retryDelay) != null ? S : _, x = typeof m == "function" ? m(n, c) : m, Q = p === !0 || typeof p == "number" && n < p || typeof p == "function" && p(n, c);
      if (t || !Q) {
        v(c);
        return;
      }
      n++, e.onFail == null || e.onFail(n, c), R(x).then(() => {
        if (h())
          return F();
      }).then(() => {
        t ? v(c) : w();
      });
    });
  };
  return H(e.networkMode) ? w() : F().then(w), {
    promise: a,
    cancel: f,
    continue: () => (r == null ? void 0 : r()) ? a : Promise.resolve(),
    cancelRetry: y,
    continueRetry: i
  };
}
function T() {
  let e = [], t = 0, n = (i) => {
    i();
  }, s = (i) => {
    i();
  };
  const r = (i) => {
    let h;
    t++;
    try {
      h = i();
    } finally {
      t--, t || a();
    }
    return h;
  }, u = (i) => {
    t ? e.push(i) : K(() => {
      n(i);
    });
  }, l = (i) => (...h) => {
    u(() => {
      i(...h);
    });
  }, a = () => {
    const i = e;
    e = [], i.length && K(() => {
      s(() => {
        i.forEach((h) => {
          n(h);
        });
      });
    });
  };
  return {
    batch: r,
    batchCalls: l,
    schedule: u,
    setNotifyFunction: (i) => {
      n = i;
    },
    setBatchNotifyFunction: (i) => {
      s = i;
    }
  };
}
const ie = T();
export {
  C as S,
  J as a,
  se as b,
  H as c,
  ie as d,
  re as e,
  B as f,
  te as g,
  U as h,
  A as i,
  X as j,
  Z as k,
  $ as l,
  Y as m,
  V as n,
  D as o,
  W as p,
  E as q,
  ne as r,
  ee as s,
  G as t,
  M as u
};
