import { useEffect as t } from "react";
import p from "../../../store/useStore.js";
import { server as E } from "../../../config/axios.js";
import { DEFAULT_TOKEN as U, CARDANO_TOKEN as l, DEFAULT_TOKEN_LIST as O } from "../tokens.js";
import { useWalletConnect as io } from "../../../hooks/useWalletConnect.js";
import { wallets as eo } from "../../../constants/wallets.js";
import { hexToAscii as W } from "../../../utils/cardanoUtils.js";
import { u as v } from "../../../useQuery-714c7c61.js";
import "../../../_commonjsHelpers-10dfc225.js";
import "../../../index-9d43cc8b.js";
import "../../../store/createTokenSearchSlice.js";
import "../../../immer-548168ec.js";
import "../../../store/createWalletSlice.js";
import "../../../store/createSwapSettingsSlice.js";
import "../../../store/createGlobalSettingsSlice.js";
import "../../../store/createUserOrdersSlice.js";
import "../../../store/createSwapSlice.js";
import "../../../store/createChartSlice.js";
import "../../../store/createBasketSlice.js";
import "../../../store/createModalWhatsNewSlice.js";
import "../../../store/createSwapParamsSlice.js";
import "../../../index-ca8eb9e1.js";
import "../../../axios-ddd885c5.js";
import "../../../config/decrypt.js";
import "../../../QueryClientProvider-103c6f38.js";
import "../../../notifyManager-b5b16d35.js";
const bo = ({
  searchParams: z,
  defaultToken: m,
  orderTypes: N,
  supportedTokens: c,
  partnerName: k,
  partnerCode: S,
  onSwapSuccess: _,
  onSwapError: B,
  selectedWallet: h,
  inputs: L,
  onWalletConnect: G,
  onClickWalletConnect: u,
  onViewOrder: T,
  orderTypeOnButtonClick: A,
  defaultSettings: r,
  autoFocus: R
}) => {
  const {
    setTokenBuy: n,
    setTokenSell: w,
    setSellAmount: x,
    setOrderTypes: b,
    setOnSwapSuccess: C,
    setOnSwapError: D,
    setOnViewOrder: F,
    setOrderType: K,
    setAutoFocus: M
  } = p((o) => o.swapSlice), { setSwapType: Y, setSupportedTokens: $ } = p(
    (o) => o.tokenSearchSlice
  ), {
    setIsHideSmallBalances: j,
    setDefaultBuySize: P,
    setIsAdvancedMode: Q,
    setPartner: g,
    setInputs: H
  } = p((o) => o.globalSettingsSlice), {
    setAvailableWallets: q,
    setIsLoadingWallet: V,
    resetWallet: X,
    setOnClickWalletConnect: Z
  } = p((o) => o.walletSlice), {
    setSlippage: d,
    setIsAutomaticSlippage: oo,
    setIsCustomSlippage: ro
  } = p((o) => o.swapSettingsSlice), { reconnectToWallet: J } = io(G), { data: s } = v(
    ["tokenListSetup"],
    async () => {
      let o = [];
      try {
        const { data: i } = await E.get("/swap/tokens");
        o = [{ ...l }, ...i];
      } catch (i) {
        console.log("Get token list on setup fail: ", i), o = Object.values(O);
      }
      return o.reduce((i, f) => (i[f.token_id] = f, i), {});
    },
    {
      refetchInterval: 3e4
    }
  );
  t(() => {
    (r == null ? void 0 : r.slippage) !== void 0 && (r == null ? void 0 : r.slippage) !== null && d(r.slippage), (r == null ? void 0 : r.isAutomaticSlippage) !== void 0 && (r == null ? void 0 : r.isAutomaticSlippage) !== null && oo(r.isAutomaticSlippage), (r == null ? void 0 : r.isCustomSlippage) !== void 0 && (r == null ? void 0 : r.isCustomSlippage) !== null && ro(r.isCustomSlippage);
  }, [JSON.stringify(r)]), t(() => {
    Z(
      u || void 0
    );
  }, [u]), t(() => {
    M(R);
  }, [R]);
  const {
    tokenIdSell: a,
    tokenIdBuy: I
  } = z, y = !a && !I;
  let e = U.token_id;
  m && (e = m), c && c.length > 0 && !m && (e = c[0]), t(() => {
    if (s) {
      if ($(
        c && c.length > 0 ? c : []
      ), y) {
        Y("BUY"), w(l), n(
          s[e] || O[e]
        );
        return;
      }
      w(s[a] || O[a]), n(s[I] || O[I]);
    }
  }, [
    y,
    m,
    JSON.stringify(c),
    JSON.stringify(s)
  ]), t(() => {
    H(L);
  }, [L, H]), t(() => {
    b(N);
  }, [N, b]), t(() => {
    A && K(A);
  }, [A, K]), t(() => {
    g(k, S);
  }, [k, S, g]), t(() => {
    C(_), D(B), F(T);
  }, [
    _,
    B,
    C,
    D,
    T,
    F
  ]), t(() => {
    const o = localStorage.getItem("globalSettings");
    if (o) {
      const i = JSON.parse(o);
      j(i.isHideSmallBalances), P(i.defaultBuySize), Q(i.isAdvancedMode), a === "" && x(i.defaultBuySize);
    }
  }, []), t(() => {
    h || (X(), V(!1)), J(h);
  }, [h]), t(() => {
    const o = eo.filter((i) => {
      if (i.alwaysShow)
        return !0;
      try {
        return window.cardano[i.windowName];
      } catch {
        return !1;
      }
    });
    q(o);
  }, []), t(() => {
    var o;
    if ((o = window.cardano) != null && o.onAccountChange) {
      const i = () => {
        J();
      };
      window.cardano.onAccountChange(i);
    }
  }, []), v(
    ["tokenSellInfo", a],
    async () => {
      try {
        if (!a || y)
          return w(l), !0;
        const { data: o } = await E.get(
          `/swap/token/${a}`
        );
        return w(o), o;
      } catch (o) {
        return console.log("ERROR FETCHING SELL TOKEN", o), l;
      }
    },
    { refetchOnWindowFocus: !1 }
  ), v(
    ["tokenBuyInfo", e, s],
    async () => {
      try {
        if (y && s && s[e])
          return n(s[e]), !0;
        if (!e)
          return n(l), !0;
        const o = await E.get(`/swap/token/${e}`).catch(() => {
          e && n({
            token_id: e,
            token_policy: e.slice(0, 56),
            token_ascii: W(e.slice(56)),
            is_verified: !1,
            ticker: W(e.slice(56))
          });
        });
        return n(o == null ? void 0 : o.data), !0;
      } catch (o) {
        return console.log("ERROR FETCHING BUY TOKEN", o), U;
      }
    },
    { refetchOnWindowFocus: !1 }
  );
};
export {
  bo as useSwapSetup
};
