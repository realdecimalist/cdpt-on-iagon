import { jsx as n, jsxs as a } from "react/jsx-runtime";
import A from "../../../components/ui/tooltipDialog.js";
import { dexes as k } from "../../../constants/dexes.js";
import d from "../../../store/useStore.js";
import { formatNumber as c } from "../../../utils/formatNumber.js";
import { findHighestLiquidity as w } from "../../../utils/formatToken.js";
import { useState as b, useEffect as N, useMemo as l } from "react";
import "../../../hooks/useScreen.js";
import "../../../components/ui/dialog.js";
import "../../../index-840f2930.js";
import "../../../index-1c873780.js";
import "../../../index-c7156e07.js";
import "../../../index-563d1ed8.js";
import "../../../index-4914f99c.js";
import "../../../index-67500cd3.js";
import "../../../index-c8f2666b.js";
import "../../../_commonjsHelpers-10dfc225.js";
import "../../../index-27cadef5.js";
import "../../../index-5116e957.js";
import "../../../lib.js";
import "../../../extend-tailwind-merge-e63b2b56.js";
import "../../../components/ui/tooltip.js";
import "../../../index-0ce202b9.js";
import "../../../index-bcfeaad9.js";
import "../../../index-f7426637.js";
import "../../../index-9d43cc8b.js";
import "../../../store/createTokenSearchSlice.js";
import "../../../immer-548168ec.js";
import "../../../store/createWalletSlice.js";
import "../../../store/createSwapSettingsSlice.js";
import "../../../store/createGlobalSettingsSlice.js";
import "../../../store/createUserOrdersSlice.js";
import "../../../store/createSwapSlice.js";
import "../../../store/createChartSlice.js";
import "../../../store/createBasketSlice.js";
import "../tokens.js";
import "../../../store/createModalWhatsNewSlice.js";
import "../../../store/createSwapParamsSlice.js";
const ct = () => {
  const { tokenSell: i, tokenBuy: s } = d((e) => e.swapSlice), [g, h] = b(null), { poolInfo: t, isLoadingData: p } = d((e) => e.chartSlice);
  N(() => {
    if (!(t != null && t.length))
      return;
    const e = w(t);
    h(e);
  }, [t]);
  const x = l(() => {
    if (!(t != null && t.length))
      return null;
    const e = [...t].sort((r, o) => {
      const m = (i == null ? void 0 : i.token_id) === "" ? r.token1Amount : r.token2Amount;
      return ((i == null ? void 0 : i.token_id) === "" ? o.token1Amount : o.token2Amount) - m;
    });
    return /* @__PURE__ */ n("div", { className: "flex flex-col gap-1", children: e == null ? void 0 : e.map((r) => {
      const o = k[r.dexName], m = r.token1Amount, u = r.token2Amount, f = (i == null ? void 0 : i.token_id) === "" ? s == null ? void 0 : s.ticker : i == null ? void 0 : i.ticker;
      return m === 0 ? null : /* @__PURE__ */ a(
        "div",
        {
          className: "flex gap-2 items-center font-proximaMedium text-xs text-white leading-none",
          children: [
            /* @__PURE__ */ n(
              "img",
              {
                src: o.logo,
                alt: o.name,
                className: "w-5 h-5 min-w-5 min-h-5 inline-block rounded-full bg-gray-106"
              }
            ),
            "₳ ",
            c(m),
            " / ",
            c(u),
            " ",
            f
          ]
        },
        o.name
      );
    }) });
  }, [t, i, s]);
  return l(() => {
    if (p && !(t != null && t.length))
      return /* @__PURE__ */ n("div", { className: "flex gap-2 items-center text-base text-white leading-none", children: /* @__PURE__ */ n(
        "img",
        {
          src: "https://storage.googleapis.com/dexhunter-images/public/squared_spinner.svg",
          width: 16,
          height: 16,
          alt: "spinner"
        }
      ) });
    const e = t == null ? void 0 : t.reduce((r, o) => {
      const m = o.token1Amount;
      return r + m;
    }, 0);
    return /* @__PURE__ */ n(
      A,
      {
        triggerClass: "text-white",
        contentClass: "rounded-xl",
        content: x,
        trigger: /* @__PURE__ */ n("div", { className: "flex gap-2 items-center font-proximaMedium text-base text-white leading-none", children: /* @__PURE__ */ a("span", { children: [
          "₳ ",
          c(e)
        ] }) })
      }
    );
  }, [g, p, i]);
};
export {
  ct as default
};
