import c from "../../store/useStore.js";
import { server as g } from "../../config/axios.js";
import { useNotify as ot } from "../../hooks/useNotify.js";
import { getHighestPriceImpact as rt } from "../../utils/formatNumber.js";
import { CARDANO_TOKEN_IDENTIFIER as R } from "../components/tokens.js";
import { a as at } from "../../axios-ddd885c5.js";
import "react";
import "../../_commonjsHelpers-10dfc225.js";
import "../../index-9d43cc8b.js";
import "../../store/createTokenSearchSlice.js";
import "../../immer-548168ec.js";
import "../../store/createWalletSlice.js";
import "../../store/createSwapSettingsSlice.js";
import "../../store/createGlobalSettingsSlice.js";
import "../../store/createUserOrdersSlice.js";
import "../../store/createSwapSlice.js";
import "../../store/createChartSlice.js";
import "../../store/createBasketSlice.js";
import "../../store/createModalWhatsNewSlice.js";
import "../../store/createSwapParamsSlice.js";
import "../../index-ca8eb9e1.js";
import "../../config/decrypt.js";
import "react/jsx-runtime";
import "../../react-toastify.esm-a636d9b1.js";
import "../../assets/svg/IconCopy.js";
import "../../assets/svg/IconX.js";
import "../../assets/svg/IconCheckNotify.js";
import "../../assets/svg/IconAlertTriangleNotify.js";
import "../../assets/svg/IconArrowUpRightNotify.js";
import "../../lib.js";
import "../../extend-tailwind-merge-e63b2b56.js";
import "../../hooks/useScreen.js";
const Xt = () => {
  const { notify: x } = ot(), {
    tokenBuy: a,
    tokenSell: r,
    sellAmount: u,
    setIsTransactionLoading: f,
    estimationError: V,
    dexBlacklist: M,
    setBuyAmount: W,
    setSellAmount: v,
    setSwapDetails: L,
    swapDetails: o,
    bonusOutput: m,
    setDexBlacklist: X,
    setIsSwapSubmitted: Y,
    setBonusOutput: z,
    inputMode: B,
    onViewOrder: h
  } = c((t) => t.swapSlice), { swapType: K } = c((t) => t.tokenSearchSlice), {
    api: d,
    userAddress: S
  } = c((t) => t.walletSlice), { slippage: j, isDexSplitting: G, isAutomaticSlippage: H } = c((t) => t.swapSettingsSlice), { setUpcomingOrders: J, setPendingOrdersCount: Z, pendingOrdersCount: $ } = c((t) => t.userOrdersSlice), { balance: A } = c((t) => t.walletSlice), { partnerName: q, partnerCode: D, inputs: Q } = c((t) => t.globalSettingsSlice), tt = () => {
    const t = ((o == null ? void 0 : o.total_fee) + (o == null ? void 0 : o.partner_fee)) / 1e6, p = parseFloat(u);
    return B === "BUY" ? parseFloat(o.total_input_without_slippage) : p + t > A && (r == null ? void 0 : r.token_id) === "" ? parseFloat(p - t) : parseFloat(p);
  };
  return { buyToken: async () => {
    var p, y, I, T, w, E, C, N, P, k, O;
    if (f(!0), u === 0 || V) {
      f(!1);
      return;
    }
    let t = {
      sign: null,
      tx: "",
      payload: null,
      ada_balance: A,
      err: null,
      step: "pre-swap",
      signatures: null
    };
    try {
      console.time("swap");
      let s = H ? rt(o, !0) + 1 : j;
      ((p = o == null ? void 0 : o.splits) == null ? void 0 : p.length) === 0 && ((I = (y = o == null ? void 0 : o.splits) == null ? void 0 : y[0]) == null ? void 0 : I.dex) === "MUESLISWAP" && (s = 0), ((r == null ? void 0 : r.token_id) === "e52964af4fffdb54504859875b1827b60ba679074996156461143dc14f5054494d" || (a == null ? void 0 : a.token_id) === "e52964af4fffdb54504859875b1827b60ba679074996156461143dc14f5054494d") && (s = Math.min(s, 50));
      let _ = M;
      ((a == null ? void 0 : a.token_id) === "8a1cfae21368b8bebbbed9800fec304e95cce39a2a57dc35e2e3ebaa4d494c4b" || (r == null ? void 0 : r.token_id) === "8a1cfae21368b8bebbbed9800fec304e95cce39a2a57dc35e2e3ebaa4d494c4b") && ((r == null ? void 0 : r.token_id) === "" && u <= 500 && (_ = ["WINGRIDER", "SUNDAESWAP", "SPECTRUM", "VYFI"]), (r == null ? void 0 : r.token_id) === "8a1cfae21368b8bebbbed9800fec304e95cce39a2a57dc35e2e3ebaa4d494c4b" && u <= 50 && (_ = ["WINGRIDER", "SUNDAESWAP", "SPECTRUM", "VYFI"]));
      const F = {
        buyer_address: S,
        token_in: r == null ? void 0 : r.token_id,
        token_out: (a == null ? void 0 : a.token_id) || "",
        slippage: s,
        amount_in: tt(),
        tx_optimization: G,
        blacklisted_dexes: _,
        referrer: q,
        inputs: Q
      };
      t.payload = F;
      const { data: n } = await g.post("/v2/swap/swap", F, {
        headers: {
          "X-Partner-Id": D
        }
      });
      t.swap = n, t.step = "pre-sign";
      const U = await (d == null ? void 0 : d.signTx(n == null ? void 0 : n.cbor, !0)), { data: i } = await g.post("/swap/sign", {
        txCbor: n == null ? void 0 : n.cbor,
        signatures: U
      });
      t.sign = i, t.signatures = U, t.step = "pre-submit";
      const l = await (d == null ? void 0 : d.submitTx(i == null ? void 0 : i.cbor));
      t.tx = l, t.step = "after-submit";
      const et = "Success" + (parseFloat(m == null ? void 0 : m.replace("+", "").replace(" ADA", "").trim()) !== 0 && ((T = o == null ? void 0 : o.splits) == null ? void 0 : T.length) > 1 ? `. Bonus: ${m}` : "");
      try {
        await g.post("/marking/submit", {
          tx_hash: l,
          order_type: "SWAP"
        });
      } catch (e) {
        console.log(e), t.marking_err = ((w = e == null ? void 0 : e.response) == null ? void 0 : w.data) || (e == null ? void 0 : e.message) || (e == null ? void 0 : e.info);
      }
      if (i != null && i.strat_id)
        try {
          await at.put("https://api.axo.trade/notify", {
            tx_id: l,
            strat_id: i == null ? void 0 : i.strat_id
          }, { headers: { "X-Api-Key": "zIXsxTvPrmu7VstLXf2UvAZVTf64zK9t" } });
        } catch (e) {
          console.log(e), t.marking_err = ((E = e == null ? void 0 : e.response) == null ? void 0 : E.data) || (e == null ? void 0 : e.message) || (e == null ? void 0 : e.info);
        }
      Y(!0);
      const b = (C = o == null ? void 0 : o.splits) == null ? void 0 : C.map((e) => ({
        ...e,
        tx_hash: l,
        status: "SUBMITTED",
        amount_in: u,
        token_id_in: (r == null ? void 0 : r.token_id) || R,
        token_id_out: (a == null ? void 0 : a.token_id) || R,
        expected_out_amount: e == null ? void 0 : e.expected_output,
        submission_time: (/* @__PURE__ */ new Date()).toISOString(),
        user_address: S,
        upcoming: !0,
        type: K,
        is_dexhunter: !0
      }));
      x({
        type: "success",
        title: et,
        desc: "Your order has been placed successfully",
        actionName: "View order",
        dataCallback: b,
        actionCallback: () => {
          var e;
          if (h) {
            h(b);
            return;
          }
          (e = window.open("https://app.dexhunter.io/orders", "_blank")) == null || e.focus(), console.log(b, "callback");
        }
      }), J(b), Z($ + ((N = o == null ? void 0 : o.splits) == null ? void 0 : N.length)), v(0), W(0), L(null), X([]), z("");
    } catch (s) {
      if (console.log(s), console.log(s.message), t.err = ((P = s.response) == null ? void 0 : P.data) || s.message || s.info, (k = s.message) != null && k.toLowerCase().includes("declined") || (O = s.info) != null && O.toLowerCase().includes("declined"))
        return;
      x({
        type: "error",
        title: "Error placing order",
        desc: "There was an error placing your order",
        actionCallback: () => {
          navigator.clipboard.writeText(JSON.stringify(t));
        }
      });
    } finally {
      f(!1);
    }
  } };
};
export {
  Xt as useSwapAction
};
